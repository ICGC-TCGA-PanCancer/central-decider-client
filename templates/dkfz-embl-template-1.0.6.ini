
# GENERAL OPTIONS
cleanup=false
cleanupBams=true
donor_id=[% donor_id %]
project_code=[% project_code %]
workflow_name=[% workflow_name %]
workflow_version=1.0.6
vmInstanceType=r3.8xlarge
vmLocationCode=12
study-refname-override=icgc_pancancer_vcf
analysis-center-override=ebi

# DOCKER OPTIONS
# this will let us include a version string in the future without a re-release of the workflow
dkfzDockerName=pancancer/dkfz_dockered_workflows:1.3
emblDockerName=pancancer/pcawg-delly-workflow:1.3
gnosDockerName=pancancer/pancancer_upload_download:1.2

# INPUTS
tumourAliquotIds=[% tumour_aliquot_ids %]
tumourAnalysisIds=[% tumour_analysis_ids %]
tumourBams=[% tumour_bams %]
controlAnalysisId=[% control_analysis_id %]
controlBam=[% control_bam %]

# LOCAL FILE OPTIONS
# So this is a little complicated, when using local file upload mode (uploadDestination=local) *and* the following variable is defined
# the upload script will use XML files from this directory named data_<analysis_id>.xml.  It will also suppress the
# validation and upload of metadata to GNOS from the upload tool.  In this way you can completely work offline.
# By default it's simply not defined and, even in local file mode, GNOS will be queried for metadata. If you
# need to work fully offline make sure you pre-download the GNOS XML, put them in this directory, and name them
# according to the standard mentioned above.
localXMLMetadataPath=

# LOCAL FILE OPTIONS
# Data directory for storing common workflow files
common_data_dir=/datastore/DEWorkflowData

# DOWNLOAD OPTIONS
# this can be S3 or GNOS or local
downloadSource=GNOS
# comma-delimited if multiple tumors
tumourBamS3Urls=s3://bucket/path/7723a85b59ebce340fe43fc1df504b35.bam
controlBamS3Url=s3://bucket/path/8f957ddae66343269cb9b854c02eee2f.bam
# this can be S3 or GNOS
uploadDestination=GNOS
uploadS3BucketPath=s3://bucket/path
uploadLocalPath=./upload_archive/
# s3 keys
s3Key=kljsdflkjsdlkfj
s3SecretKey=lksdfjlsdkjflksdjfkljsd
# GNOS options
pemFile=/home/ubuntu/.ssh/gnos.pem
gnosServer=[% download_gnos_url %]
uploadServer=[% upload_gnos_url %]
uploadPemFile=/home/ubuntu/.ssh/gnos.pem
gnosTimeoutMin=20
gnosRetries=3

# UPLOAD OPTIONS
# DELLY-SPECIFIC OPTIONS
# key=datastore:type=text:display=T:display_name=ID for the current run, will be used to create filenames
EMBL.delly_runID=[% tumour_aliquot_ids %]
# key=input_bam_path_tumor:type=text:display=T:display_name=The relative tumor BAM path, directory name only
EMBL.input_bam_path_tumor=inputs/[% tumour_analysis_ids %]
# key=input_bam_path_germ:type=text:display=T:display_name=The relative germline BAM path, corresponding to the directory with the tumor BAM
EMBL.input_bam_path_germ=inputs/[% control_analysis_id %]
# key=datastore:type=text:display=T:display_name=path to datastore directory within the Docker container (which is tied from the upper level when running the Docker container)
EMBL.datastore=/datastore/
#key=breakpoint:type=pulldown:display=T:display_name=Selecting true includes the breakpointing. Requires the reference genome fasta, defined in ref_genome_path:pulldown_items=true|true;false|false
EMBL.breakpoint=true
#key=ref_genome_path:type=text:display=F:display_name=The reference genome used in breakpointing. Only used if breakpoint=true.
EMBL.ref_genome_path=/datafiles/genome.fa
#key=ref_genome_gc_path:type=text:display=F:display_name=The reference genome GC file.
EMBL.ref_genome_gc_path=/datafiles/hs37d5_1000GP.gc
# specify that this is not the final call set!
EMBL.delly_workflowID=embl-delly_1-3-0-preFilter
# key=delly_bin:type=text:display=T:display_name=The path to the DELLY binary
EMBL.delly_bin=/usr/bin/delly
# key=cov_bin:type=text:display=T:display_name=The path to the COV binary
EMBL.cov_bin=/usr/bin/cov
EMBL.vcfcombine_bin=/usr/bin/vcfcombine
EMBL.vcf_sort_bin=/usr/bin/vcf-sort
# key=gcnorm_r:type=text:display=T:display_name=The path to gcNormCov.R
EMBL.gcnorm_r=/usr/bin/gcNormCov_extended.R
# key=cov_plot:type=text:display=T:display_name=The path to cov_plot.pl script
EMBL.cov_plot=/usr/bin/cov_plot.pl
# key=rscript_bin:type=text:display=T:display_name=The path to Rscript binary
EMBL.rscript_bin=/usr/bin/Rscript
# key=somatic_filter:type=text:display=T:display_name=The path to DellySomaticFilter.py
EMBL.somatic_filter=/usr/bin/DellySomaticFreqFilter.py
# key=vcf2tsv:type=text:display=T:display_name=The path to dellyVcf2Tsv.py
EMBL.delly2bed=/usr/bin/dellyVcf2Tsv.py
EMBL.delly_pe_dump=/usr/bin/delly_pe_dump.sh
# key=prepare_uploader_bin:type=text:display=T:display_name=The path to prepare upload shell script
EMBL.prepare_uploader_bin=/usr/bin/delly_prepare_uploader.sh
# key=copy_results_bin:type=text:display=T:display_name=The path to copy the final results to data storage
EMBL.copy_results_bin=/usr/bin/delly_copy_results.sh
EMBL.output_prefix=./
EMBL.output_dir=delly_results

# DKFZ-SPECIFIC OPTIONS
DKFZ.dkfzDataBundleServer=https://gtrepo-dkfz.annailabs.com
DKFZ.dkfzDataBundleUUID=32749c9f-d8aa-4ff5-b32c-296976aec706
DKFZ.dkfzDataBundleFile=dkfz-workflow-dependencies_150318_0951.tar.gz
DKFZ.dkfzDataBundleDownloadKey=/home/ubuntu/.ssh/gnos.pem

